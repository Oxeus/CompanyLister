//Adam La FLeur
Assignment #1: Design Writeup

For assignment one I plan on defining a struct for the data that needs to be store, if I need to, I will use a class instead. I plan on using two classes, 
one to manage the linked list of job listings called jobList; and another to manage a linked list of locations where each location has a linked list of job 
listings, this class will be called locList. The data from the client will be passed through arguments to their designated locations in the data structure. 
For the data portion of the ADT I plan to keep track of the name of the company, a description of what they do, qualifications needed for the job, the degree 
requirements, the location, the job specification, the pay rate, the rating, and a review.

I plan on jobList containing public class members that allow me to add a job entry to the list, edit the content of a specific job, display all jobs in the list,
and deleting a job from the list. jobList will also contain privately a head pointer to a node that contains the job data. I then plan on having locList containing 
class members that allow adding a new location, editing the displaying all jobs for all locations, and class members that allow me to access the public functions of
jobList when the need arises. locList will contain privately a head pointer to a node that contains a linked list of jobs. Each class will have a constructor to 
construct objects and a destructor to release dynamic memory. Depending on how I want to plan it I will probably have the locList class constructor read from an 
external data file and preload existing data to create preloaded content for the data structure. I also plan to do the same thing with the destructor which is 
having it write the data out to an external file.

I want to use algorithms in the add functions of the data structure that allow me to sort in order of name. For the jobList linked list I will have it sort based 
on company name, I will then have locList linked list sorted by location name. I decided to sort when adding to the list to minimize traversals and to get rid of 
the need to a function to sort the lists. For the print algorithms I will have the jobList class traverse and display all jobs at a location and since its already 
sorted the program doesn’t have to waste time printing the list sorted. I will have locList then print the name of the location followed by a traversal of the 
location linked list, during the traversal the jobList print member will be accessed for each location. Also I have to solve the problem of adding a new job where 
the location is not present in the locList, for this I plan on programming a special case for this were a location will be added to the list then add the job data 
to the list at that specific location.

To prevent unauthorized access to the data structure I will make the storage a part of the private section of each class which allows limited access to the 
structures. The only way a client can access to information is through limited public members provided to them. For each public function I will have it return 
back the results of whether or not the function was successful or not, this will be done using integers instead of printing out “Success” or “Failure”, 
I will probably use 0 for failure and a 1 for success. I plan on handling special cases where when the program starts there is no data to read in from a 
file, so the program won’t create the data structure until the user wants to add a job from the menu. Another special case would be where the user enters 
unappropriate info such as filling out the job name and description but not filling in the other fields, the add algorithm will then initialize these to be 
empty to prevent errors when trying to read the job later on.